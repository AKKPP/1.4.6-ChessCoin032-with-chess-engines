// Copyright (c) 2012 The Bitcoin developers
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.
#include <string>

#include "version.h"

// Name of client reported in the 'version' message. Report the same name
// for both bitcoind and bitcoin-qt, to make it harder for attackers to
// target servers or GUI users specifically.
const std::string CLIENT_NAME("Satoshi");

// Client version number
#define CLIENT_VERSION_SUFFIX   ""

// Compiler name
#ifdef __INTEL_COMPILER
//code specific to intel compiler
#define CL_NAME   "-icpc"
#elif _MSC_VER
//code specific to MSVC compiler
#define CL_NAME   "-msvc"
#elif __clang__
//code specific to clang compiler
#define CL_NAME   "-clang"
#elif __MINGW32__
//code specific to mingw compiler
#define CL_NAME   "-mingw"
#elif __GNUC__
//code specific to gnu compiler
#define CL_NAME   "-gcc"
#else
#define CL_NAME   "-genericcl"
//others
#endif


// The following part of the code determines the CLIENT_BUILD variable.
// Several mechanisms are used for this:
// * first, if HAVE_BUILD_INFO is defined, include build.h, a file that is
//   generated by the build environment, possibly containing the output
//   of git-describe in a macro called BUILD_DESC
// * secondly, if this is an exported version of the code, GIT_ARCHIVE will
//   be defined (automatically using the export-subst git attribute), and
//   GIT_COMMIT will contain the commit id.
// * then, three options exist for determining CLIENT_BUILD:
//   * if BUILD_DESC is defined, use that literally (output of git-describe)
//   * if not, but GIT_COMMIT is defined, use v[maj].[min].[rev].[build]-g[commit]
//   * otherwise, use v[maj].[min].[rev].[build]-unk
// finally CLIENT_VERSION_SUFFIX is added

// First, include build.h if requested
//#ifdef HAVE_BUILD_INFO
//#    include "build.h"
//#endif

// git will put "#define GIT_ARCHIVE 1" on the next line inside archives.
#ifdef GIT_ARCHIVE
#define GIT_COMMIT_DATE "Tue, 7 Sep 2021 23:10:09 +0300"
#endif

#define GIT_ARCHIVE 1
#ifdef GIT_ARCHIVE
#define GIT_COMMIT_ID "32a928e"
#endif

#define BUILD_DESC_FROM_COMMIT(maj,min,rev,buildnum) \
    DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(buildnum) " x64"

#define BUILD_DESC_FROM_UNKNOWN(maj,min,rev) \
    DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "-unk"

#ifndef BUILD_DESC
#define BUILD_DESC BUILD_DESC_FROM_COMMIT(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD)
#endif

#ifndef BUILD_AGENT
#define BUILD_AGENT(maj,min,rev,buildnum) "/Satoshi:" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(buildnum) "/"
#endif

#ifndef BUILD_DATE
#    ifdef GIT_COMMIT_DATE
#        define BUILD_DATE GIT_COMMIT_DATE
#    else
#        define BUILD_DATE __DATE__ " " __TIME__
#    endif
#endif

const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);
const std::string CLIENT_DATE(BUILD_DATE);
const std::string CLIENT_AGENT(BUILD_AGENT(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD));
